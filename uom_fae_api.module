<?php
/**
 * @file
 */

define('ENDPOINT', 'http://128.250.202.125:7001/joseki/oracle');
define('FAE_BASE', 'http://www.findanexpert.unimelb.edu.au/');

/**
 * Implements hook_init().
 */
function uom_fae_api_init() {
  // Load the predefined SparQL queries.
  module_load_include('inc', 'uom_fae_api', 'include/uom_fae_api.queries');
}

/**
 * Implements hook_permission().
 */
function uom_fae_api_permission() {
  return array(
    'administer fae api' => array(
      'title' => t('Administer Find an Expert'),
      'description' => t('Configure the Find an Expert API.')
    ),
  );
}

/**
 * Page callback for organisations.
 */
function uom_fae_api_organisation() {

  $result = uom_fae_api_query(FAE_ORGANISATION_QUERY);

  if (empty($result['rows'])) {
    return t('Empty');
  }

  $replace = array(
    FAE_BASE . 'individual/' => 'organisation/',
  );

  $rows = array();
  foreach ($result['rows'] as $item) {
    $link = strtr($item['org'], $replace);
    $row['organisation'] = l($item['orgLabel'], 'fae/' . $link);
    $rows[] = $row;
  }

  // Make a table.
  return theme('table', array('rows' => $rows));
}

/**
 * Page callback for query with arguments.
 */
function uom_fae_api_organisation_people($record) {

  $args = array(
    ':uri' => FAE_BASE . 'individual/' . $record,
  );

  $result = uom_fae_api_query(FAE_ORGANISATION_PEOPLE_QUERY, $args);

  if (empty($result['rows'])) {
    return t('Empty');
  }

  // Grab the page title.
  drupal_set_title($result['rows'][0]['orgLabel']);

  $replace = array(
    FAE_BASE . 'individual/' => 'person/',
  );

  $rows = array();
  foreach ($result['rows'] as $item) {
    $link = strtr($item['person'], $replace);
    $row['person'] = l($item['personLabel'], 'fae/' . $link);
    $row['title'] = $item['positionLabel'];
    $rows[] = $row;
  }

  // Make a table.
  return theme('table', array('rows' => $rows));
}

/**
 * Return contact information for a block on a person's profile.
 */
function uom_fae_api_person_contact($uri) {
  $args = array(
    ':uri' => $uri,
  );

  $result = uom_fae_api_query(UOM_FAE_PERSON_CONTACT, $args);

  if (empty($result['rows'])) {
    return t('Empty');
  }

  dpm($result);

}

/**
 * Return overview information for a person.
 */
function uom_fae_api_person_overview($uri) {

  $args = array(
    ':uri' => $uri,
  );

  $result = uom_fae_api_query(UOM_FAE_PERSON_OVERVIEW, $args);

  if (empty($result['rows'])) {
    return t('Empty');
  }

  // Preprocess the result into something themeable.


  $output  = '<h3>Overview</h3>';
  $output .= '<marquee style="color: red;">' . (($result['rows'][0]['availableForSup'] == 'Y') ? t('Is available as supervisor.') : t('Is not available as supervisor')) . '</marquee>';
  $output .= '<p>' . $result['rows'][0]['overviewText1'] . '</p>';
  $output .= '<h3>Research</h3>';
  $output .= '<p>' . $result['rows'][0]['researchOverview'] . '</p>';

  $result = uom_fae_api_query(FOA_PUBLICATIONS_QUERY, $args);
  if (!empty($result['rows'])) {
    $rows = array();
    foreach ($result['rows'] as $item) {
      $date = strtotime($item['dateValue']);
      $row['publication'] = l(strip_tags($item['pubtitle']), $item['publication']);
      if (!empty($item['pageStart'])) {
        $row['pages'] = t('Pg @start - @end', array('@start' => $item['pageStart'], '@end' => $item['pageEnd']));
      }
      else {
        $row['pages'] = '';
      }
      $row['date'] = format_date($date, 'custom', 'j F Y');
      $row['isbn'] = t('ISBN @isbn', array('@isbn' => $item['isbn13']));
      $rows[] = $row;
    }
    $output .= '<h3>Publications</h3>';
    $output .= theme('table', array('rows' => $rows));
  }

  return $output;
}

/**
 * Implements hook_uom_fae_api_query_alter().
 *
 * Add the XMLNS prefixes to the query and do the default
 * placeholder replacements.
 */
function uom_fae_api_uom_fae_api_query_alter(&$query, &$args) {
  $query = FAE_QUERY_PREFIX . $query;

  $defaults = array(
    ':timeout' => 100,
    ':qid' => 'uom-fae-api',
    ':uri' => FAE_BASE
  );
  $args += $defaults;
}

/**
 * Helper that performs the SparQL query.
 *
 * Performs a vararg replace much like db_query() would. Merges in :uri if missing.
 *
 * Will query the raw response on success if caching is enabled.
 */
function uom_fae_api_query($query, $args = array()) {
  $period = variable_get('cache_lifetime', 0);

  $endpoint = new stdClass();
  $endpoint->uri = ENDPOINT;

  // Modify the query and query argument.
  //
  // @see uom_fae_api_uom_fae_api_query_alter()
  drupal_alter('uom_fae_api_query', $query, $args);

  // Replace vars.
  $query = strtr($query, $args);

  // Now that we have a full query, check if there is a cached result for it
  // and load that. Then continue, so that the alter hooks are called.
  $hash = md5($query);
  if ($period && $cache = cache_get('uom_fae_api:' . $hash)) {
    $result = $cache->data;
  }
  else {
    $result = sparql_request($query, $endpoint);
    if ($result['result'] === FALSE) {
      drupal_set_message(t('FaE SparQL query error'), 'error');
      watchdog('uom_fae_api', $query, WATCHDOG_ERROR);
    }
    elseif ($period) {
      // Caching is enabled, throw the result into the cache!
      cache_set('uom_fae_api:' . $hash, $result, 'cache', time() + $period);
    }
  }

  // Allow the result to be rewritten.
  drupal_alter('uom_fae_api_query_result', $result);

  // Return the result.
  return $result['result'];
}
