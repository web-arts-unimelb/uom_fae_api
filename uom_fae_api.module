<?php
/**
 * @file
 */

define('UOM_SPARQL_ENDPOINT', 'http://128.250.202.125:7001/joseki/oracle');
define('FAE_BASE', 'http://www.findanexpert.unimelb.edu.au/');
define('FAE_MODULE_CACHE_TIME', '86400');

// Load the predefined SparQL queries.
module_load_include('inc', 'uom_fae_api', 'include/uom_fae_api.queries');

/**
 * Implements hook_flush_caches().
 */
function uom_fae_api_flush_caches() {
  return array('cache_uom_fae_api');
}

/**
 * Implements hook_admin_menu_cache_info().
 */
function uom_fae_api_admin_menu_cache_info() {
	// http://api.drupalize.me/api/drupal/function/hook_admin_menu_cache_info/7
	// Return an associative array whose keys denote internal identifiers for a particular caches (which can be freely defined, but should be in a module's namespace) and whose values are associative arrays containing
  $caches['uom_fae_api_update'] = array(
    'title' => t('Find an Expert queries'),
    'callback' => '_uom_fae_api_cache_clear',
  );

	// Gary
	$caches['uom_fae_api_profile_remove'] = array(
    'title' => t('Truncate FaE profile cache table'),
    'callback' => '_uom_fae_api_profile_remove',
  );

  return $caches;
}

/**
 * Callback to clear the uom_fae_api cache.
 */
function _uom_fae_api_cache_clear($cid = NULL, $wildcard = FALSE) {
  if (empty($cid)) {
    db_delete('cache_cache_uom_fae_api')->execute();
  }
  else {
    $query = db_delete('cache_uom_fae_api');
    if ($wildcard) {
      $query->condition('cid', $cid . '%', 'LIKE');
    }
    else {
      $query->condition('cid', $cid);
    }
    $query->execute();
  }
}

// Gary
// Clear the profile cache table: fae_profile_custom_cache
function _uom_fae_api_profile_remove($cid = NULL, $wildcard = FALSE) {
	$callback_name = 'uom_fae_api_profile_remove';
	if(!empty($cid) && $cid === $callback_name) {
		db_delete('fae_profile_custom_cache')->execute();
	}
}

/**
 * Implements hook_menu().
 */
function uom_fae_api_menu() {
  $items['admin/config/services/uom-fae'] = array(
    'title' => t('Find an Expert'),
    'description' => t('Configure the Find an Expert API.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uom_fae_api_admin_form'),
    'access arguments' => array('administer uom fae api'),
    'file' => 'uom_fae_api.admin.inc',
  );
  $items['admin/config/services/uom-fae/api'] = array(
    'title' => t('Find an Expert API'),
    'description' => t('Configure the Find an Expert API.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uom_fae_api_admin_form'),
    'access arguments' => array('administer uom fae api'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'uom_fae_api.admin.inc',
    'weight' => -10,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function uom_fae_api_permission() {
  return array(
    'administer uom fae api' => array(
      'title' => t('Administer Find an Expert'),
      'description' => t('Configure the Find an Expert API.')
    ),
  );
}

/**
 * Return overview information for a person.
 */
function uom_fae_api_person_overview($uri, $args = array()) {
	$cache_id = "faeprofile:overview:$uri:". md5($uri);

  // Mash in default arguments.
  $defaults = array(
    ':uri' => $uri,
		'cache_id' => $cache_id,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_PERSON_OVERVIEW, $args);

  return (!empty($result['rows'])) ? $result['rows'][0] : t('Empty');
}

/**
 * Return a person's affiliation.
 */
function uom_fae_api_person_affiliation($uri, $args = array()) {
	$cache_id = "faeprofile:affiliation:$uri:". md5($uri);

  $defaults = array(
    ':uri' => $uri,
		'cache_id' => $cache_id,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_PERSON_AFFILIATION, $args);

  return (!empty($result['rows'])) ? $result['rows'] : NULL;
}

/**
 * Return a person's publications.
 */
function uom_fae_api_person_publications($uri, $args = array()) {
	$cache_id = "faeprofile:pub:$uri:". md5($uri);

  // Mash in default arguments.
  $defaults = array(
    ':uri' => $uri,
		'cache_id' => $cache_id,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_PERSON_PUBLICATIONS, $args);

  return (!empty($result['rows'])) ? $result['rows'] : NULL;
}

/**
 * Return a person's research.
 */
function uom_fae_api_person_research($uri, $args = array()) {
	$cache_id = "faeprofile:research:$uri:". md5($uri);

  // Mash in default arguments.
  $defaults = array(
    ':uri' => $uri,
		'cache_id' => $cache_id,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_PERSON_RESEARCH, $args);

  return (!empty($result['rows'])) ? $result['rows'] : NULL;
}

/**
 * Return a person's awards.
 */
function uom_fae_api_person_awards($uri, $args = array()) {
	$cache_id = "faeprofile:award:$uri:". md5($uri);

  // Mash in default arguments.
  $defaults = array(
    ':uri' => $uri,
		'cache_id' => $cache_id,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_PERSON_AWARDS, $args);

  return (!empty($result['rows'])) ? $result['rows'] : NULL;
}

/**
 * Return a person's linkages.
 */
/*
function uom_fae_api_person_linkages($uri, $args = array()) {
  // Mash in default arguments.
  $defaults = array(
    ':uri' => $uri,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_PERSON_LINKAGES, $args);

  return (!empty($result['rows'])) ? $result['rows'] : NULL;
}
*/

/**
 * Return a person's linkages, but without org label, only org uri
 */
function uom_fae_api_person_linkages_no_org_label($uri, $args = array()) {
  // Mash in default arguments.
  $defaults = array(
    ':uri' => $uri,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_PERSON_LINKAGES_NO_ORG_LABEL, $args);

  return (!empty($result['rows'])) ? $result['rows'] : NULL;
}

/**
 * Return org label 
 */
function uom_fae_api_person_linkages_org_label($uri, $args = array()) {
  // Mash in default arguments.
  $defaults = array(
    ':uri' => $uri,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_PERSON_LINKAGES_ORG_LABEL, $args);

  return (!empty($result['rows'])) ? $result['rows'] : NULL;
}



/**
 * Return a person's supervision.
 */
function uom_fae_api_person_supervision($uri, $args = array()) {
	$cache_id = "faeprofile:supervision:$uri:". md5($uri);

  // Mash in default arguments.
  $defaults = array(
    ':uri' => $uri,
		'cache_id' => $cache_id,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_PERSON_SUPERVISION, $args);

  return (!empty($result['rows'])) ? $result['rows'][0] : NULL;
}

/**
 * Return contact information for a block on a person's profile.
 */
function uom_fae_api_person_contact($uri, $args = array()) {
	$cache_id = "faeprofile:contact:$uri:". md5($uri);

  // Mash in default arguments.
  $defaults = array(
    ':uri' => $uri,
		'cache_id' => $cache_id,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_PERSON_CONTACT, $args);

  return (!empty($result['rows'])) ? $result['rows'][0] : NULL;
}

/**
 * Return qualification information for a block on a person's profile.
 */
function uom_fae_api_person_qualifications($uri, $args = array()) {
	$cache_id = "faeprofile:qualification:$uri:". md5($uri);

  // Mash in default arguments.
  $defaults = array(
    ':uri' => $uri,
		'cache_id' => $cache_id,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_PERSON_QUALIFICATIONS, $args);

  return (!empty($result['rows'])) ? $result['rows'] : NULL;
}

/**
 * Return research grants for a given organisation.
 */
function uom_fae_api_organisation_research($uri, $args = array()) {
  // Mash in default arguments.
  $defaults = array(
    ':uri' => $uri,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_ORGANISATION_GRANTS, $args);

  return (!empty($result['rows'])) ? $result['rows'] : NULL;
}


/**
 * Implements hook_uom_fae_api_query_alter().
 *
 * Add the XMLNS prefixes to the query and do the default
 * placeholder replacements.
 */
function uom_fae_api_uom_fae_api_query_alter(&$query, &$args) {
  $query = FAE_QUERY_PREFIX . $query;

  $defaults = array(
    ':timeout' => variable_get('uom_fae_api_timeout', 10),
    ':qid' => variable_get('uom_fae_api_qid', 'uom-fae-api'),
  );
  $args += $defaults;
}

/**
 * Helper that performs the SparQL query.
 *
 * Performs a vararg replace much like db_query() would. Merges in :uri if missing.
 *
 * Will query the raw response on success if caching is enabled.
 */
function uom_fae_api_query($query, $args = array()) {
  $endpoint = new stdClass();
  $endpoint->uri = variable_get('uom_fae_api_endpoint', UOM_SPARQL_ENDPOINT);

	// Cache id
	if(isset($args['cache_id'])) {
		$cache_id = $args['cache_id'];	
	}
	else {
		$cache_id = FALSE;
	}

  // Modify the query and query argument.
  //
  // @see uom_fae_api_uom_fae_api_query_alter()
  drupal_alter('uom_fae_api_query', $query, $args);

  // Replace vars.
  $query = trim(strtr($query, $args));

	// NOTE: don't delete, use it to test. 
	//dsm($query);

	// Initialize
  $result = NULL;

	if(uom_fae_api_is_url_reachable()) {
		$cache_data = uom_fae_api_profile_custom_cache_get($cache_id);
		if(!empty($cache_data) && $cache_id !== FALSE) {
			//test
			//dsm("use cache data: $cache_id");			
	
			// Set it empty, so we can use cache data.
      $result = '';
		}
		else {
			//test
      //dsm("use joski data: $cache_id");			

			$result = sparql_request($query, $endpoint);
		}

		variable_set('uom_fae_api_is_url_reachable', TRUE);

		if($result === NULL) {
			// Throw dsm errors
      $msg = 'sparql_request returns null. Possible error connection timed out after 30 seconds in ARC2_Reader. E.g. the grant query, but other query will be perfectly fine. Now this grant query becomes bottleneck. The page needs to wait for it to finish, then it starts to render itself. As a result, all tabs will be displayed except the grant tab.';
      dsm('- start -');
      dsm($msg);
      dsm($query);
      dsm('- end -');

			$result = '';
		}
		else if(empty($result)) {
      // It means using cache data    
    }
		else if($result['result'] === FALSE) {
			// Joseki returns false result, but joseki is reachable.
			dsm('Empty result: Joseki returns false result, but joseki is reachable.');
			$result = '';
		}
		else if(empty($result['result'])) {
			// Really empty
			dsm('Real empty result');
			$result = '';	
		}
	}
	else {
		// Get result from backup data plan
		// In here, Joseki is definitely down.
    dsm('Joseki is down. Each tab use its cache data, which set in preprecess func');
		$result = '';
		variable_set('uom_fae_api_is_url_reachable', FALSE);
	}

	if(!empty($result)) {
    // Allow the result to be rewritten.
    drupal_alter('uom_fae_api_query_result', $result);

    // Return the result.
    return $result['result'];
  }
  else {
    return '';
  }	
}

/**
 * Return a list of all callbacks defined via hook_uom_fae_api_callbacks().
 */
function uom_fae_api_callbacks() {
  $callbacks = &drupal_static(__FUNCTION__);

  if (!empty($callbacks)) {
    return $callbacks;
  }

  $module_info = system_get_info('module');

  // Get list of callbacks.
  foreach (module_implements('uom_fae_api_callbacks') as $module) {
    $functions = module_invoke($module, 'uom_fae_api_callbacks');
    foreach ($functions as $function => $name) {
      $callbacks[$module_info[$module]['name']][$function] = check_plain($name);
    }
  }

  ksort($callbacks);
  return $callbacks;
}

/**
 * Helper for quick access to publication types.
 */
function uom_fae_api_publication_types($key = NULL) {
  $types = array(
		'A'		=> t('Books'),
    'A1'  => t('Authored Research Books'),
    'A2'  => t('Edited Books'),
    'A3'  => t('Revised Books'),
    'A4'  => t('Translated Book'),
    'A5'  => t('Textbooks'),
    'A6'  => t('Authored Books Other'),

		'B'		=> t('Book Chapters'),
    'B1'  => t('Research Book Chapters'),
    'B2'  => t('Book Chapters Other'),

		'C'		=> t('Journal Articles'),
    'C1'  => t('Journal Articles Refereed'),
    'C2'  => t('Journal Articles Unrefereed'),
    'C3'  => t('Journal Articles Unrefereed Letters or Notes'),
    'C5'  => t('Other Refereed Contribution to Refereed Journals'),

		'D'		=> t('Major Reference works'),
    'D4'  => t('Major Reference works'),

		'E'		=> t('Editorship of Journal'),
    'E1'  => t('Editor (incl. Chief, Assoc. and other Editorial Roles)'),
    'E2'  => t('Editorial Board Member'),
    'E3'  => t('Guest Editor'),

		'F'		=> t('Conference Proceedings'),
    'F1'  => t('Fully Written Paper Refereed'),
    'F2'  => t('Fully Written Paper unrefereed'),

		'G'		=> t('Reports and Working Papers'),
    'G4'  => t('Major Reports and Working Papers'),
    'G5'  => t('Minor Reports and Working Papers'),
	
		'I'		=> t('Patents'),
		'I1'  => t('Patents'),

		'J11' => t('Major Published Works'),
    'J12' => t('Major Recorded Works'),
    'J13' => t('Major Exhibited Works'),
    'J6'  => t('Minor Published Works'),
    'J7'  => t('Minor Recorded Works'),
    'J8'  => t('Minor Exhibited Works'),
		'Ji'  => t('Creative Published Works'),
		'Jii' => t('Creative Recorded Works'),
		'Jiii'=> t('Creative Exhibited Works'),

		'K'		=> t('Curatorship'),
		'K1'	=> t('Curatorship of Web Based Exhibition'),
		'K2'	=> t('Curatorship of Exhibition/Event'),
		'K3'	=> t('Curatorship of Festival'),
		'K4'	=> t('Curatorship - Other'),

		'M'		=> t('Computer Software Products'),
    'M5'  => t('Computer software Products'),

		'N'		=> t('Audio-visual Recordings'),
    'N4'  => t('Audio-visual Recordings'),
		
		'P'		=> t('Performance'),
    'P1'  => t('Major Performance'),
    'P2'  => t('Minor Performance'),

		'R'		=> t('Research Higher Degree Theses'),
    'R11' => t('RHD Theses Passed'),
    'R12' => t('RHD Theses in Progress'),
		
		'U'		=> t('Performance of Unpublished Composition'),
		'U1'	=> t('1st Performance of Major Unpublished Composition'),
		'U2'  => t('1st Performance of Minor Unpublished Composition'),
  );

  return (empty($key)) ? $types : $types[$key];
}

/*
function uom_fae_api_is_url_reachable() {
	// http://128.250.202.125:7001/joseki/oracle
	$tmp_url = variable_get('uom_fae_api_endpoint', UOM_SPARQL_ENDPOINT);
	$end_len = strlen('/oracle');
	$full_len = strlen($tmp_url);
	$needed_len = $full_len - $end_len; 
	
	$url = substr($tmp_url, 0, $needed_len);
	
	$condi = false;
	// http://stackoverflow.com/questions/1122845/what-is-the-fastest-way-to-determine-if-a-url-exists-in-php
	$ch = curl_init($url);

	curl_setopt($ch, CURLOPT_NOBODY, true); // set to HEAD request
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // don't output the response
	curl_exec($ch);
	if(
		curl_getinfo($ch, CURLINFO_HTTP_CODE) == 200 || 
		curl_getinfo($ch, CURLINFO_HTTP_CODE) == 301 ||
		curl_getinfo($ch, CURLINFO_HTTP_CODE) == 302
	) {
		$condi = true;
	}
	else {
		$condi = false;
	}
	
	curl_close($ch);
	return $condi;
}
*/

// http://stackoverflow.com/questions/1122845/what-is-the-fastest-way-to-determine-if-a-url-exists-in-php
// http://stackoverflow.com/questions/16452636/php-curl-what-does-curl-exec-return
function uom_fae_api_is_url_reachable() {
	// Early check
	if(uom_fae_api_is_url_reachable_1()) {
		// Continue	
	}
	else {
		return false;
	}

	$condi = FALSE;

	// http://128.250.202.125:7001/joseki/oracle
  $tmp_url = variable_get('uom_fae_api_endpoint', UOM_SPARQL_ENDPOINT);

  //$end_len = strlen('/oracle');
  //$full_len = strlen($tmp_url);
  //$needed_len = $full_len - $end_len;
  //$url = substr($tmp_url, 0, $needed_len);

	$url = $tmp_url;
  $curl = curl_init($url);

	$the_query = "
PREFIX dc:    <http://purl.org/dc/elements/1.1/>
PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs:  <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>
PREFIX owl:   <http://www.w3.org/2002/07/owl#>
PREFIX fn:    <http://www.w3.org/2005/xpath-functions#>
PREFIX ouext: <http://oracle.com/semtech/jena-adaptor/ext/user-def-function#>
PREFIX oext:  <http://oracle.com/semtech/jena-adaptor/ext/function#>
PREFIX ORACLE_SEM_FS_NS: <http://oracle.com/semtech#timeout=100,qid=123>
SELECT ?sc ?c
WHERE 
  { ?sc rdfs:subClassOf ?c}	
	";

  $postdata = http_build_query(array('query' => $the_query));
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_POST, 1);
  curl_setopt($curl, CURLOPT_POSTFIELDS, $postdata);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1); // Basically no output in command line

  $tmp_condi = curl_exec($curl);
  
  if($tmp_condi === FALSE) {
  	$condi = FALSE;

		// Gary: in case the log gets too big 
		//uom_fae_api_curl_log($curl);
  }
	else {
		$condi = TRUE;
	}
  curl_close($curl);

	return $condi;
}


function uom_fae_api_is_url_reachable_1() {
	// http://128.250.202.125:7001/joseki/oracle
  $tmp_url = variable_get('uom_fae_api_endpoint', UOM_SPARQL_ENDPOINT);
  $end_len = strlen('/oracle');
  $full_len = strlen($tmp_url);
  $needed_len = $full_len - $end_len;

  $url = substr($tmp_url, 0, $needed_len);

  $condi = false;
  // http://stackoverflow.com/questions/1122845/what-is-the-fastest-way-to-determine-if-a-url-exists-in-php
  $ch = curl_init($url);

  curl_setopt($ch, CURLOPT_NOBODY, true); // set to HEAD request
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // don't output the response
  curl_setopt ($ch, CURLOPT_CONNECTTIMEOUT, 0);
  curl_setopt($ch, CURLOPT_TIMEOUT, 1);
  
  curl_exec($ch);
  if(
    curl_getinfo($ch, CURLINFO_HTTP_CODE) == 200 ||
    curl_getinfo($ch, CURLINFO_HTTP_CODE) == 301 ||
    curl_getinfo($ch, CURLINFO_HTTP_CODE) == 302
  ) {
    $condi = true;
  }
  else {
    $condi = false;
  }

	return $condi;
}



function uom_fae_api_curl_log($curl) {
	$info = print_r(curl_getinfo($curl), TRUE);
	$errno = curl_errno($curl);
	$error = curl_error($curl);
	$date = date('Y-m-d H:i:s');

	// http://stackoverflow.com/questions/3066421/writing-a-new-line-to-file-in-php
	$sep = " | ";
	$msg = $date. $sep. $info. $sep. $errno. $sep. $error. "\n\n";

	$file_dir = dirname(__FILE__);	
	$file_name = $file_dir. '/uom_fae_api_curl_log.txt';

	$condi = file_put_contents($file_name, $msg, FILE_APPEND);

}


/* NOTE: clean bucket strategy, never dirty it.
function uom_fae_api_custom_cache_set($cache_id, $data) {
	// http://stackoverflow.com/questions/8878779/sql-error-1406-data-too-long-for-column
	// https://drupal.org/node/1676344
	$table_name = 'fae_profile_custom_cache_clean_backup';
	
	if(!db_table_exists($table_name)) {
		$sql = "
			CREATE TABLE $table_name(
				id INT(11) NOT NULL AUTO_INCREMENT,
				cache_id VARCHAR(256) NOT NULL,
				data LONGTEXT NOT NULL,
				PRIMARY KEY ( id )
			)
		";
		db_query($sql);
	}
		
	// Select
	$tmp_res = db_select($table_name, 'c')
		->fields('c')
    ->condition('cache_id', $cache_id, '=')	
		->execute();
 
	$json_data = json_encode($data);
 
	if($tmp_res->rowCount() >= 1) {
		//test
		//dsm('update');
	
		// Update
		$my_data = array(
			'data' => $json_data,
		);
		
		db_update($table_name)
  		->fields($my_data)
  		->condition('cache_id', $cache_id, '=')
  		->execute();
	}
	else {
		//test
		//dsm('insert');
	
		// Insert
		$my_data = array(
			'cache_id' => $cache_id,
			'data' => $json_data,
		);
		db_insert($table_name)
			->fields($my_data)
			->execute();
	} 
}
*/


function uom_fae_api_custom_cache_get($cache_id) {
	dsm('Joseki is down, Use backup data for page.');

	$data = '';
	$table_name = 'fae_profile_custom_cache_clean_backup';
	
	if(db_table_exists($table_name)) {
		$tmp_res = db_select($table_name, 'c')
			->fields('c')
		  ->condition('cache_id', $cache_id, '=')	
			->execute();
	
		if($tmp_res->rowCount() >= 1) {
			$result = $tmp_res->fetchAssoc();
			$data = json_decode($result['data'], true);
		}
		else {
			// Error
			dsm("Cache_id: $cache_id. No backup data at table $table_name.");
			$data = '';
		}
	}
	
	return $data;	
}


/* NOTE: clean bucket strategy, never dirty it.
function uom_fae_api_cache_and_backup($cache_id, $data) {
	// Put it into cache
	// cache_set($cache_id, $data, 'cache', time() + FAE_MODULE_CACHE_TIME);
		
	// Put it into db 
	uom_fae_api_custom_cache_set($cache_id, $data);
}
*/


function uom_fae_api_profile_custom_cache_set($cache_id, $data) {
	// http://stackoverflow.com/questions/8878779/sql-error-1406-data-too-long-for-column
	// https://drupal.org/node/1676344
	$table_name = 'fae_profile_custom_cache';
	
	if(!db_table_exists($table_name)) {
		$sql = "
			CREATE TABLE $table_name(
				id INT(11) NOT NULL AUTO_INCREMENT,
				cache_id VARCHAR(256) NOT NULL,
				data LONGTEXT NOT NULL,
				PRIMARY KEY ( id )
			)
		";
		db_query($sql);
	}
		
	// Select
	$tmp_res = db_select($table_name, 'c')
		->fields('c')
    ->condition('cache_id', $cache_id, '=')	
		->execute();
 
	$json_data = json_encode($data);
 
	if($tmp_res->rowCount() >= 1) {
		//test
		//dsm('update');
	
		// Update
		$my_data = array(
			'data' => $json_data,
		);
		
		db_update($table_name)
  		->fields($my_data)
  		->condition('cache_id', $cache_id, '=')
  		->execute();
	}
	else {
		//test
		//dsm('insert');
	
		// Insert
		$my_data = array(
			'cache_id' => $cache_id,
			'data' => $json_data,
		);
		db_insert($table_name)
			->fields($my_data)
			->execute();
	} 
}


function uom_fae_api_profile_custom_cache_get($cache_id) {
	$data = '';
	$table_name = 'fae_profile_custom_cache';
	
	if(db_table_exists($table_name)) {
		$tmp_res = db_select($table_name, 'c')
			->fields('c')
		  ->condition('cache_id', $cache_id, '=')	
			->execute();
	
		if($tmp_res->rowCount() >= 1) {
			$result = $tmp_res->fetchAssoc();
			$data = json_decode($result['data'], true);
		}
		else {
			$data = '';
		}
	}
	
	return $data;	
}


function fae_uom_my_watchdog($data = NULL) {
	$msg = '<pre>'. print_r($data, TRUE). '</pre>';
	watchdog('my_watchdog', $msg);
}
