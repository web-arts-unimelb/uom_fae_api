<?php
/**
 * @file
 */

define('UOM_SPARQL_ENDPOINT', 'http://128.250.202.125:7001/joseki/oracle');
define('FAE_BASE', 'http://www.findanexpert.unimelb.edu.au/');

/**
 * Implements hook_init().
 */
function uom_fae_api_init() {
  // Load the predefined SparQL queries.
  module_load_include('inc', 'uom_fae_api', 'include/uom_fae_api.queries');
}

/**
 * Implements hook_permission().
 */
function uom_fae_api_permission() {
  return array(
    'administer fae api' => array(
      'title' => t('Administer Find an Expert'),
      'description' => t('Configure the Find an Expert API.')
    ),
  );
}

/**
 * Return overview information for a person.
 */
function uom_fae_api_person_overview($uri, $args = array()) {
  // Mash in default arguments.
  $defaults = array(
    ':uri' => $uri,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_PERSON_OVERVIEW, $args);

  if (empty($result['rows'])) {
    return t('Empty');
  }

  return $result['rows'][0];
}

/**
 * Return a person's affiliation.
 */
function uom_fae_api_person_affiliation($uri, $args = array()) {
  $defaults = array(
    ':uri' => $uri,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_PERSON_AFFILIATION, $args);

  if (empty($result['rows'])) {
    return NULL;
  }

  return $result['rows'];
}

/**
 * Return a person's publications.
 */
function uom_fae_api_person_publications($uri, $args = array()) {
  // Mash in default arguments.
  $defaults = array(
    ':uri' => $uri,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_PERSON_PUBLICATIONS, $args);

  if (empty($result['rows'])) {
    return NULL;
  }

  return $result['rows'];
}

/**
 * Return a person's research.
 */
function uom_fae_api_person_research($uri, $args = array()) {
  // Mash in default arguments.
  $defaults = array(
    ':uri' => $uri,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_PERSON_RESEARCH, $args);

  if (empty($result['rows'])) {
    return NULL;
  }

  return $result['rows'];
}

/**
 * Return a person's awards.
 */
function uom_fae_api_person_awards($uri, $args = array()) {
  // Mash in default arguments.
  $defaults = array(
    ':uri' => $uri,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_PERSON_AWARDS, $args);

  if (empty($result['rows'])) {
    return NULL;
  }

  return $result['rows'];
}
/**
 * Return a person's linkages.
 */
function uom_fae_api_person_linkages($uri, $args = array()) {
  // Mash in default arguments.
  $defaults = array(
    ':uri' => $uri,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_PERSON_LINKAGES, $args);

  if (empty($result['rows'])) {
    return NULL;
  }

  return $result['rows'];
}

/**
 * Return a person's supervision.
 */
function uom_fae_api_person_supervision($uri, $args = array()) {
  // Mash in default arguments.
  $defaults = array(
    ':uri' => $uri,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_PERSON_SUPERVISION, $args);

  if (empty($result['rows'])) {
    return NULL;
  }

  return $result['rows'][0];
}

/**
 * Return contact information for a block on a person's profile.
 */
function uom_fae_api_person_contact($uri, $args = array()) {
  // Mash in default arguments.
  $defaults = array(
    ':uri' => $uri,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_PERSON_CONTACT, $args);

  if (empty($result['rows'])) {
    return NULL;
  }

  return $result['rows'][0];
}

/**
 * Implements hook_uom_fae_api_query_alter().
 *
 * Add the XMLNS prefixes to the query and do the default
 * placeholder replacements.
 */
function uom_fae_api_uom_fae_api_query_alter(&$query, &$args) {
  $query = FAE_QUERY_PREFIX . $query;

  $defaults = array(
    ':timeout' => 100,
    ':qid' => 'uom-fae-api',
  );
  $args += $defaults;
}

/**
 * Helper that performs the SparQL query.
 *
 * Performs a vararg replace much like db_query() would. Merges in :uri if missing.
 *
 * Will query the raw response on success if caching is enabled.
 */
function uom_fae_api_query($query, $args = array()) {
  $period = variable_get('cache_lifetime', 0);

  $endpoint = new stdClass();
  $endpoint->uri = UOM_SPARQL_ENDPOINT;

  // Modify the query and query argument.
  //
  // @see uom_fae_api_uom_fae_api_query_alter()
  drupal_alter('uom_fae_api_query', $query, $args);

  // Replace vars.
  $query = trim(strtr($query, $args));

  // Now that we have a full query, check if there is a cached result for it
  // and load that. Then continue, so that the alter hooks are called.
  $hash = md5($query);
  if ($period && $cache = cache_get('uom_fae_api:' . $hash)) {
    $result = $cache->data;
  }
  else {
    $result = sparql_request($query, $endpoint);
    if ($result['result'] === FALSE) {
      drupal_set_message(t('FaE SparQL query error'), 'error');
      watchdog('uom_fae_api', $query, WATCHDOG_ERROR);
    }
    elseif ($period) {
      // Caching is enabled, throw the result into the cache!
      cache_set('uom_fae_api:' . $hash, $result, 'cache', time() + $period);
    }
  }

  // Allow the result to be rewritten.
  drupal_alter('uom_fae_api_query_result', $result);

  // Return the result.
  return $result['result'];
}
