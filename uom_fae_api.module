<?php
/**
 * @file
 */

define('UOM_SPARQL_ENDPOINT', 'http://128.250.202.125:7001/joseki/oracle');
define('FAE_BASE', 'http://www.findanexpert.unimelb.edu.au/');

// Load the predefined SparQL queries.
module_load_include('inc', 'uom_fae_api', 'include/uom_fae_api.queries');

/**
 * Implements hook_flush_caches().
 */
function uom_fae_api_flush_caches() {
  return array('cache_uom_fae_api');
}

/**
 * Implements hook_admin_menu_cache_info().
 */
function uom_fae_api_admin_menu_cache_info() {
  $caches['update'] = array(
    'title' => t('Find an Expert queries'),
    'callback' => '_uom_fae_api_cache_clear',
  );
  return $caches;
}

/**
 * Callback to clear the uom_fae_api cache.
 */
function _uom_fae_api_cache_clear($cid = NULL, $wildcard = FALSE) {
  if (empty($cid)) {
    db_delete('cache_cache_uom_fae_api')->execute();
  }
  else {
    $query = db_delete('cache_uom_fae_api');
    if ($wildcard) {
      $query->condition('cid', $cid . '%', 'LIKE');
    }
    else {
      $query->condition('cid', $cid);
    }
    $query->execute();
  }
}

/**
 * Implements hook_menu().
 */
function uom_fae_api_menu() {
  $items['admin/config/services/uom-fae'] = array(
    'title' => t('Find an Expert'),
    'description' => t('Configure the Find an Expert API.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uom_fae_api_admin_form'),
    'access arguments' => array('administer uom fae api'),
    'file' => 'uom_fae_api.admin.inc',
  );
  $items['admin/config/services/uom-fae/api'] = array(
    'title' => t('Find an Expert API'),
    'description' => t('Configure the Find an Expert API.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uom_fae_api_admin_form'),
    'access arguments' => array('administer uom fae api'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'uom_fae_api.admin.inc',
    'weight' => -10,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function uom_fae_api_permission() {
  return array(
    'administer uom fae api' => array(
      'title' => t('Administer Find an Expert'),
      'description' => t('Configure the Find an Expert API.')
    ),
  );
}

/**
 * Return overview information for a person.
 */
function uom_fae_api_person_overview($uri, $args = array()) {
  // Mash in default arguments.
  $defaults = array(
    ':uri' => $uri,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_PERSON_OVERVIEW, $args);

  return (!empty($result['rows'])) ? $result['rows'][0] : t('Empty');
}

/**
 * Return a person's affiliation.
 */
function uom_fae_api_person_affiliation($uri, $args = array()) {
  $defaults = array(
    ':uri' => $uri,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_PERSON_AFFILIATION, $args);

  return (!empty($result['rows'])) ? $result['rows'] : NULL;
}

/**
 * Return a person's publications.
 */
function uom_fae_api_person_publications($uri, $args = array()) {
  // Mash in default arguments.
  $defaults = array(
    ':uri' => $uri,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_PERSON_PUBLICATIONS, $args);

  return (!empty($result['rows'])) ? $result['rows'] : NULL;
}

/**
 * Return a person's research.
 */
function uom_fae_api_person_research($uri, $args = array()) {
  // Mash in default arguments.
  $defaults = array(
    ':uri' => $uri,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_PERSON_RESEARCH, $args);

  return (!empty($result['rows'])) ? $result['rows'] : NULL;
}

/**
 * Return a person's awards.
 */
function uom_fae_api_person_awards($uri, $args = array()) {
  // Mash in default arguments.
  $defaults = array(
    ':uri' => $uri,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_PERSON_AWARDS, $args);

  return (!empty($result['rows'])) ? $result['rows'] : NULL;
}

/**
 * Return a person's linkages.
 */
function uom_fae_api_person_linkages($uri, $args = array()) {
  // Mash in default arguments.
  $defaults = array(
    ':uri' => $uri,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_PERSON_LINKAGES, $args);

  return (!empty($result['rows'])) ? $result['rows'] : NULL;
}

/**
 * Return a person's supervision.
 */
function uom_fae_api_person_supervision($uri, $args = array()) {
  // Mash in default arguments.
  $defaults = array(
    ':uri' => $uri,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_PERSON_SUPERVISION, $args);

  return (!empty($result['rows'])) ? $result['rows'][0] : NULL;
}

/**
 * Return contact information for a block on a person's profile.
 */
function uom_fae_api_person_contact($uri, $args = array()) {
  // Mash in default arguments.
  $defaults = array(
    ':uri' => $uri,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_PERSON_CONTACT, $args);

  return (!empty($result['rows'])) ? $result['rows'][0] : NULL;
}

/**
 * Return research grants for a given organisation.
 */
function uom_fae_api_organisation_research($uri, $args = array()) {
  // Mash in default arguments.
  $defaults = array(
    ':uri' => $uri,
  );
  $args += $defaults;

  $result = uom_fae_api_query(UOM_FAE_ORGANISATION_GRANTS, $args);

  return (!empty($result['rows'])) ? $result['rows'] : NULL;
}


/**
 * Implements hook_uom_fae_api_query_alter().
 *
 * Add the XMLNS prefixes to the query and do the default
 * placeholder replacements.
 */
function uom_fae_api_uom_fae_api_query_alter(&$query, &$args) {
  $query = FAE_QUERY_PREFIX . $query;

  $defaults = array(
    ':timeout' => variable_get('uom_fae_api_timeout', 30),
    ':qid' => variable_get('uom_fae_api_qid', 'uom-fae-api'),
  );
  $args += $defaults;
}

/**
 * Helper that performs the SparQL query.
 *
 * Performs a vararg replace much like db_query() would. Merges in :uri if missing.
 *
 * Will query the raw response on success if caching is enabled.
 */
function uom_fae_api_query($query, $args = array()) {
  $period = variable_get('uom_fae_api_cache', 0);

  $endpoint = new stdClass();
  $endpoint->uri = variable_get('uom_fae_api_endpoint', UOM_SPARQL_ENDPOINT);

  // Modify the query and query argument.
  //
  // @see uom_fae_api_uom_fae_api_query_alter()
  drupal_alter('uom_fae_api_query', $query, $args);

  // Replace vars.
  $query = trim(strtr($query, $args));

  // Now that we have a full query, check if there is a cached result for it
  // and load that. Then continue, so that the alter hooks are called.
  $hash = md5($query);
  if ($period && $cache = cache_get('uom_fae_api:' . $hash, 'cache_uom_fae_api')) {
    $result = $cache->data;
  }
  else {
    $result = sparql_request($query, $endpoint);
    if ($result['result'] === FALSE) {
      drupal_set_message(t('FaE SparQL query error'), 'error');
      watchdog('uom_fae_api', $query, WATCHDOG_ERROR);
    }
    elseif ($period) {
      // Caching is enabled, throw the result into the cache!
      cache_set('uom_fae_api:' . $hash, $result, 'cache_uom_fae_api', time() + $period);
    }
  }

  // Allow the result to be rewritten.
  drupal_alter('uom_fae_api_query_result', $result);

  // Return the result.
  return $result['result'];
}

/**
 * Return a list of all callbacks defined via hook_uom_fae_api_callbacks().
 */
function uom_fae_api_callbacks() {
  $callbacks = &drupal_static(__FUNCTION__);

  if (!empty($callbacks)) {
    return $callbacks;
  }

  $module_info = system_get_info('module');

  // Get list of callbacks.
  foreach (module_implements('uom_fae_api_callbacks') as $module) {
    $functions = module_invoke($module, 'uom_fae_api_callbacks');
    foreach ($functions as $function => $name) {
      $callbacks[$module_info[$module]['name']][$function] = check_plain($name);
    }
  }

  ksort($callbacks);
  return $callbacks;
}
