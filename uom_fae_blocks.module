<?php
/**
 * @file
 */

/**
 * Implements hook_menu().
 */
function uom_fae_blocks_menu() {
  $items['admin/config/services/uom-fae/blocks'] = array(
    'title' => t('Find an Expert Blocks'),
    'description' => t('Configure the Find an Expert Blocks module.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uom_fae_blocks_settings_form'),
    'access arguments' => array('administer uom fae api'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function uom_fae_blocks_block_info() {
  for ($delta = 0; $delta < variable_get('uom_fae_blocks', 1); $delta++) {
    $settings = variable_get('uom_fae_blocks_' . $delta, uom_fae_blocks_defaults($delta));
    $blocks[$delta]['info'] = $settings['description'];
    $blocks[$delta]['cache'] = DRUPAL_CACHE_GLOBAL;
  }
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function uom_fae_blocks_block_configure($delta) {
  $settings = variable_get('uom_fae_blocks_' . $delta, uom_fae_blocks_defaults($delta));

  $callbacks = uom_fae_api_callbacks();

  $form['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Block description'),
    '#default_value' => $settings['description'],
    '#description' => t('A brief description of your block. Used on the <a href="@block-overview-page">block overview page</a>.', array('@block-overview-page' => url('admin/build/block')))
  );

  $form['#tree'] = FALSE;
  $form['fae'] = array(
    '#type' => 'fieldset',
    '#title' => t('Find an Expert Settings'),
  );

  $form['fae']['resource'] = array(
    '#type' => 'textfield',
    '#title' => t('Resource URI'),
    '#default_value' => $settings['resource'],
    '#description' => t('The Find an Expert resource URI query query for information. This should be the internal URI you obtain via the paperclip icon, not the browser URL when vieiwing a page on Find an Expert.'),
    '#required' => TRUE,
  );
  $form['fae']['callback'] = array(
    '#type' => 'select',
    '#title' => t('Resource type'),
    '#default_value' => $settings['callback'],
    '#options' => $callbacks,
    '#description' => t('The resource type determines how results are parsed and displayed.'),
    '#required' => TRUE,
  );
  $form['fae']['arguments'] = array(
    '#type' => 'textfield',
    '#title' => t('Callback arguments'),
    '#default_value' => implode(', ', $settings['arguments']),
    '#description' => t('Any arguments that should be passed to the resource callback. Separate multiple arguments with commas.'),
    '#required' => FALSE,
  );

  return $form;
}

/**
 * Implements hook_block_save().
 */
function uom_fae_blocks_block_save($delta = '', $edit = array()) {
  if (empty($edit['resource']) || !valid_url($edit['resource'], TRUE)) {
    drupal_set_message(t('The resource uri should contain a valid URL.'), 'error');
    return;
  }

  if (strpos($edit['arguments'], ',') === FALSE) {
    $arguments = array($edit['arguments']);
  }
  else {
    $arguments = explode(',', $edit['arguments']);
  }

  $settings = array(
    'description' => $edit['description'],
    'resource' => $edit['resource'],
    'callback' => $edit['callback'],
    'arguments' => $arguments,
  );

  variable_set('uom_fae_blocks_' . $delta, $settings);
}

/**
 * Implements hook_block_view().
 */
function uom_fae_blocks_block_view($delta = '') {
  // Load settings for the specified block.
  $settings = variable_get('uom_fae_blocks_' . $delta, uom_fae_blocks_defaults());

  // Load the queries. They'll be handy, you know?
  module_load_include('inc', 'uom_fae_blocks', 'uom_fae_blocks.queries');

  // Merge any optional arguments into the callback params.
  $arguments = array_merge(array($settings['resource']), $settings['arguments']);

  $content = call_user_func_array($settings['callback'], $arguments);

  // Return empty if no data - hides the block.
  if (empty($content)) {
    return array();
  }

  // Output block HTML
  return array(
    'subject' => t('Find an Expert Block'),
    'content' => $content,
  );
}

/**
 * Settings form callback.
 */
function uom_fae_blocks_settings_form() {
  $form['uom_fae_blocks'] = array(
    '#title' => t('Number of blocks'),
    '#description' => t(''),
    '#type' => 'textfield',
    '#size' => 3,
    '#default_value' => variable_get('uom_fae_blocks', 1),
    '#element_validate' => array('element_validate_integer_positive'),
  );
  return system_settings_form($form);
}

/**
 * Helper that returns an array of default settings.
 */
function uom_fae_blocks_defaults($delta = 0) {
  return array(
    'description' => t('Find an Expert Block: unconfigured @delta', array('@delta' => $delta)),
    'callback' => '',
    'resource' => '',
    'arguments' => array(),
  );
}

/**
 * Implements hook_theme().
 */
function uom_fae_blocks_theme() {
  return array(
    'uom_fae_blocks_person' => array(
      'variables' => array(
        'name' => $label,
        'href' => $uri,
      ),
    ),
    'uom_fae_blocks_research' => array(
      'variables' => array(
        'data' => array(),
        'uri' => NULL,
      ),
    ),
    'uom_fae_blocks_research_grant' => array(
      'variables' => array(
        'grant' => array(),
      ),
    ),
    'uom_fae_blocks_publications' => array(
      'variables' => array(
        'data' => array(),
        'uri' => NULL,
      ),
    ),
    'uom_fae_blocks_publication' => array(
      'variables' => array(
        'publication' => array(),
      ),
    ),
  );
}

/**
 * Implements hook_uom_fae_api_callbacks().
 */
function uom_fae_blocks_uom_fae_api_callbacks() {
  return array(
    'uom_fae_blocks_research_current' => t('Organisation: Current research grants'),
    'uom_fae_blocks_research_past' => t('Organisation: Past research grants'),
    'uom_fae_blocks_publications' => t('Organisation: Publications by year'),
  );
}

/**
 * Callback that returns a themed current research grants list.
 */
function uom_fae_blocks_research_current($uri) {
  $data = uom_fae_api_query(UOM_FAE_BLOCKS_ORGANISATION_GRANTS_CURRENT, array(
    ':uri' => $uri,
    ':dateEnd' => date('Y-12-31')
  ));

  if (empty($data['rows'])) {
    return NULL;
  }

  return theme('uom_fae_blocks_research', array('data' => $data['rows'], 'uri' => $uri));
}

/**
 * Callback that returns a themed past research grants list.
 */
function uom_fae_blocks_research_past($uri) {
  $data = uom_fae_api_query(UOM_FAE_BLOCKS_ORGANISATION_GRANTS_PAST, array(
    ':uri' => $uri,
    ':dateEnd' => date('Y-12-31')
  ));

  if (empty($data['rows'])) {
    return NULL;
  }

  return theme('uom_fae_blocks_research', array('data' => $data['rows'], 'uri' => $uri));
}

/**
 * Callback that returns a themed list of publications for a given year.
 */
function uom_fae_blocks_publications($uri) {
  $args = func_get_args();

  $currYear = intval(date('Y'));

  // Grab a year argument from the callback string and sanitise it.
  if (!empty($args[1])) {
    $year = intval($args[1]);
    if (!empty($year) && $year > 0 && $year <= $currYear) {
      $currYear = $year;
    }
  }

  $data = uom_fae_api_query(UOM_FAE_BLOCKS_ORGANISATION_PUBLICATIONS, array(
    ':uri' => $uri,
    ':currYear' => sprintf("%04d", $currYear + 1),
    ':prevYear' => sprintf("%04d", ($currYear)),
  ));

  if (empty($data['rows'])) {
    return NULL;
  }

  return theme('uom_fae_blocks_publications', array('data' => $data['rows'], 'uri' => $uri));
}

/**
 * Preprocessors for the FaE blocks.
 */

/**
 * Implements template_preprocess_uom_fae_blocks_research().
 */
function template_preprocess_uom_fae_blocks_research(&$vars) {

  // Early return with empty vars if there are no items to process.
  if (empty($vars['data'])) {
    return;
  }

  $uri = $vars['uri'];

  // Init with empty variables.
  $research = $vars['research'] = array();

  foreach ($vars['data'] as $grant) {
    $id = $grant['grant'];

    // Already processed, add an extra person only.
    if (!empty($research[$id])) {
      $research[$id]['people'][$grant['person']] = $grant['personLabel'];
    }
    else {
      $startstamp = strtotime($grant['dateStart']);
      $endstamp = strtotime($grant['dateEnd']);

      $research[$id] = array(
        'grant' => $grant['grantLabel'],
        'link' => $grant['grant'],
        'scheme' => $grant['grantScheme'],
        'organisation' => $grant['orgLabel'],
        'start' => (!empty($startstamp)) ? date('Y', $startstamp) : '',
        'end' => (!empty($endstamp)) ? date('Y', $endstamp) : '',
        'people' => array($grant['person'] => $grant['personLabel']),
      );
    }
  }

  // Theme each of the research-grant-with-people records.
  foreach ($research as $id => $grant) {
    $vars['research'][] = theme('uom_fae_blocks_research_grant', array('grant' => $grant));
  }
}

/**
  A1 - Authored Research Books 

  Apperley TH. 2010. Gaming rhythms: Play and counterplay from the situated to the global. Amsterdam, Netherlands: Institute of Network Cultures. 
  Yue A. 2010. Ann Hui's Song of the Exile. Hong Kong: Hong Kong University Press. 
*/

/**
 * Implements template_preprocess_uom_fae_blocks_publications().
 */
function template_preprocess_uom_fae_blocks_publications(&$vars) {

  // Early return with empty vars if there are no items to process.
  if (empty($vars['data'])) {
    return;
  }

  $uri = $vars['uri'];

  // Init with empty variables.
  $publications = $vars['publications'] = $vars['categories'] = array();

  foreach ($vars['data'] as $publication) {
    $id = $publication['article'];

    $date = strtotime($publication['dateValue']);

    // Already processed, add an extra person only.
    if (!empty($publications[$id])) {
      $publications[$id]['people'][$publication['authorRank']] = array($publication['person'] => $publication['authorName']);
    }
    else {
      $publications[$id] = array(
        'title'     => $publication['title'],
        'link'      => $publication['article'],
        'type'      =>  _uom_fae_blocks_publication_type($publication['type']),
        'people'    => array($publication['authorRank'] => array($publication['person'] => $publication['authorName'])),
        'date'      => (!empty($date)) ? date('Y', $date) : '',
        'publisher' => $publication['publishOrg'],
        'start'     => (!empty($publication['pageStart'])) ? $publication['pageStart'] : '',
        'end'       => (!empty($publication['pageEnd'])) ? $publication['pageEnd'] : '',
        'edition'   => (!empty($publication['edition'])) ? $publication['edition'] : '',
        'isbn13'    => (!empty($publication['isbn13'])) ? $publication['isbn13'] : '',
        'volume'    => (!empty($publication['volume'])) ? $publication['volume'] : '',
      );
    }
  }

  // Theme each of the publication-with-people records.
  foreach ($publications as $id => &$publication) {
    uksort($publication['people'], "_uom_fae_blocks_peoplesort");
    $vars['publications'][] = theme('uom_fae_blocks_publication', array('publication' => $publication));
    $vars['categories'][$publication['type']][] = theme('uom_fae_blocks_publication', array('publication' => $publication));
  }
}

/**
 * Theme functions for the FaE blocks.
 */

/**
 * Implements theme_uom_fae_blocks_research().
 *
 * Theme a list of research grants.
 */
function theme_uom_fae_blocks_research($variables) {
  $rows = array();
  foreach($variables['research'] as $row) {
    $rows[] = array($row);
  }
  return theme('table', array('rows' => $rows));
}

/**
 * This is what the current format is. Replicate for now, can change/override later.
 *
 * Project title: Media Treatment and Communication Needs of Sudanese Australians
 * Sponsor name / Collaborator: Australian Research Council
 * Scheme name: Linkage Projects
 * Responsible CI and discipline: Dr David Nolan (Media and Communication)
 * Dates: 2011 - 2013
 */

/**
 * Implements theme_uom_fae_blocks_research_grant().
 *
 * Theme a single research grant.
 */
function theme_uom_fae_blocks_research_grant($variables) {
  $grant = $variables['grant'];

  $output = '<strong>' . t('Project title:') . '</strong> <em>' . check_plain(ucwords(strtolower($grant['grant']))) . '</em>';
  if (!empty($grant['organisation'])) {
    $output .= '<br /><strong>' . t('Sponsor name / Collaborator:') . '</strong> ' . check_plain(ucwords(strtolower($grant['organisation'])));
  }
  if (!empty($grant['scheme'])) {
    $output .= '<br /><strong>' . t('Scheme name:') . '</strong> ' . check_plain($grant['scheme']);
  }
  if (!empty($grant['people'])) {
    $people = array();
    foreach ($grant['people'] as $uri => $label) {
      $people[] = theme('uom_fae_blocks_person', array('name' => $label, 'href' => $uri));
    }
    $output .= '<br /><strong>' . t('Responsible CI:') . '</strong> ' . implode(', ', $people);
  }
  if (!empty($grant['start'])) {
    $output .= '<br /><strong>' . t('Dates:') . '</strong> ' . $grant['start'];
    if (!empty($grant['end'])) {
      $output .= t(' - ') . $grant['end'];
    }
  }

  return $output;
}

/**
 * Implements theme_uom_fae_blocks_publications().
 *
 * Theme a list of publications.
 */
function theme_uom_fae_blocks_publications($variables) {
  $output = '';
  $rows = array();

  foreach($variables['categories'] as $category => $publications) {
    $output .= theme('item_list', array('items' => $publications, 'title' =>  $category));
  }
  return $output;
}

/**
 * Implements theme_uom_fae_blocks_publication().
 *
 * Theme a single publication.
 *
 * Yue A. 2010. Ann Hui's Song of the Exile. Hong Kong: Hong Kong University Press.·
 */
function theme_uom_fae_blocks_publication($variables) {
  $output = '';
  $publication = $variables['publication'];

  $people = array();
  foreach ($publication['people'] as $person) {
    foreach ($person as $uri => $name) {
      $people[] = theme('uom_fae_blocks_person', array('name' => $name, 'href' => $uri));
    }
  }

  $output .= implode(', ', $people) . '.';
  if (!empty($publication['date'])) {
    $output .= ' ' . $publication['date'] . '.';
  }
  $output .= ' <em>' . trim($publication['title']) . '.</em>';

  if (!empty($publication['publisher'])) {
    $output .= ' ' . $publication['publisher'] . '.';
  }
  if (!empty($publication['start'])) {
    $output .= ' pp. ' . $publication['start'];
    if (!empty($publication['end'])) {
      $output .= '-' . $publication['end'];
    }
  }
  return $output;
}

function theme_uom_fae_blocks_person($variables) {
  $name = $variables['name'];
  $href = $variables['href'];

  $efq = new EntityFieldQuery();
  $entities = $efq
    ->entityCondition('entity_type', 'user')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_fae_resource', 'url',  $href, '=')
    ->execute();

  $uid = array_keys($entities['user']);
  if (!empty($uid)) {
    return l($name, 'user/' . $uid[0]);
  }
  return l($name, $href);
}

/**
 * Turn a publication type URI into a label.
 */
function _uom_fae_blocks_publication_type($uri) {
  // Early return.
  if (empty($uri)) {
    return t('Other Works');
  }

  // The final two characters of the publication type uri match our array.
  $type = substr($uri, strlen('http://www.findanexpert.unimelb.edu.au/ontology/PublicationType'));
  return uom_fae_api_publication_types($type);
}

/**
 * Sort authors by rank.
 */
function _uom_fae_blocks_peoplesort($a, $b) {
  return intval($a) > intval($b);
}
